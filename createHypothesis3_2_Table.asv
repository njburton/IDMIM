function createHypothesis3_2_Table

% load or run options for running this function
if exist('optionsFile.mat','file')==2
    load('optionsFile.mat');
else
    optionsFile = runOptions();
end


% prespecify variables needed for running this function
iModel  = 2;
iTask   = 1;
iRep    = 1;
nReps   = 1;
cohortNo = 3;
subCohort = [];
conditions = 3;
currTask = optionsFile.cohort(cohortNo).testTask(1).name;
[mouseIDs,nSize] = getSampleVars(optionsFile,cohortNo,subCohort);

%% EXCLUDE MICE from this analysis
% check available mouse data and exclusion criteria
noDataArray = zeros(1,nSize);
exclArray   = zeros(1,nSize);

for iCondition = 1:conditions %for each treatmentGroup (FLX dosage inc saline)
    for iMouse = 1:nSize
        currMouse = mouseIDs{iMouse};
        loadInfoName = getFileName(optionsFile.cohort(cohortNo).taskPrefix,currTask,...
            [],optionsFile.cohort(3).conditions{iCondition},iRep,nReps,'info');
        if isfile([char(optionsFile.paths.cohort(cohortNo).data),'mouse',char(currMouse),'_',loadInfoName,'.mat'])
        else
            disp(['data for mouse ', currMouse,' not available']);
            noDataArray(iMouse) = iMouse;
        end
    end
end

noDataArray = sort(noDataArray,'descend');
noDataArray(noDataArray==0)=[];

for i=noDataArray
    mouseIDs(i) =[];
end
nSize = numel(mouseIDs);

for iCondition = 1:conditions %for each treatmentGroup (FLX dosage inc saline)
    for iMouse = 1:nSize
        currMouse = mouseIDs{iMouse};
        %%%
        loadInfoName = getFileName(optionsFile.cohort(cohortNo).taskPrefix,currTask,...
            [],optionsFile.cohort(3).conditions{iCondition},iRep,nReps,'info');
        load([char(optionsFile.paths.cohort(cohortNo).data),...
            'mouse',char(currMouse),'_',loadInfoName]);
        if any([MouseInfoTable.exclCrit2_met,MouseInfoTable.exclCrit1_met],'all')
            disp(['mouse ', currMouse,' excluded based on exclusion criteria']);
            exclArray(iMouse) = iMouse;
        end
    end
end

exclArray = sort(exclArray,'descend');
exclArray(exclArray==0)=[];

for i=exclArray
    mouseIDs(i) =[];
end
nSize = numel(mouseIDs);

% Calculate total rows needed (mice Ã— taskRepetitions)
totalRows = nSize * conditions;
% Create table
RQ3_2_dataTable = table('Size', [totalRows, 4], ...
    'VariableTypes', {'string', 'string', 'double', 'double'}, ...
    'VariableNames', {'ID', 'sex', 'condition', 'omega2'});

% Use a counter to keep track of the current row
rowCounter = 1;

% First loop through repetitions, then mice
for iRep = 1:nReps
    for iMouse = 1:nSize
        currMouse = mouseIDs{iMouse};

        % Load info file to get sex and condition
        loadInfoName = getFileName(optionsFile.cohort(cohortNo).taskPrefix, currTask, [], [], iRep, nReps, 'info');
        infoPath = [char(optionsFile.paths.cohort(cohortNo).data), 'mouse', char(currMouse), '_', loadInfoName, '.mat'];

        if isfile(infoPath)
            load(infoPath, 'MouseInfoTable');
            RQ3_2_dataTable.ID(rowCounter) = currMouse;
            RQ3_2_dataTable.sex(rowCounter) = MouseInfoTable.Sex;
            RQ3_2_dataTable.rep(rowCounter) = iRep;  % Use the current repetition

            % Load model fit results to get omega2
            loadName = getFileName(optionsFile.cohort(cohortNo).taskPrefix, currTask, [], [], iRep, nReps, []);
            fitPath = [char(optionsFile.paths.cohort(cohortNo).results), 'mouse', char(currMouse), '_', ...
                loadName, '_', optionsFile.dataFiles.rawFitFile{iModel}, '.mat'];

            if isfile(fitPath)
                load(fitPath, 'est');
                % Extract omega2 parameter from the HGF 2-level model
                RQ3_2_dataTable.omega2(rowCounter) = est.p_prc.om(2);  % Access omega2 (level 2 parameter)
            else
                % If fit file doesn't exist, set omega2 to NaN
                RQ3_2_dataTable.omega2(rowCounter) = NaN;
            end

            % Increment row counter after processing this mouse-repetition
            rowCounter = rowCounter + 1;
        else
            % If info file doesn't exist, still increment the counter
            % but fill with placeholder values
            RQ3_2_dataTable.ID(rowCounter) = currMouse;
            RQ3_2_dataTable.sex(rowCounter) = "";
            RQ3_2_dataTable.rep(rowCounter) = iRep;
            RQ3_2_dataTable.omega2(rowCounter) = NaN;
            rowCounter = rowCounter + 1;
        end
    end
end

% Trim to the number of rows we actually filled
if rowCounter <= totalRows
    RQ3_2_dataTable = RQ2_2_dataTable(1:rowCounter-1, :);
end

% Remove any rows with NaN values in the omega2 column
nanRows = isnan(RQ3_2_dataTable.omega2);
if any(nanRows)
    RQ3_2_dataTable(nanRows, :) = [];
    fprintf('Removed %d rows with missing omega2 values.\n', sum(nanRows));
end

% Save table as both .mat and .csv
savePath = [optionsFile.paths.cohort(cohortNo).groupLevel, optionsFile.cohort(cohortNo).taskPrefix, ...
    optionsFile.cohort(cohortNo).name, '_RQ3_2_dataTable'];

save([savePath, '.mat'], 'RQ3_2_dataTable');
writetable(RQ3_2_dataTable, [savePath, '.csv']);

disp(['Table saved to: ', savePath, '.csv']);
end