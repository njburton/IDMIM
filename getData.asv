function optionsFile = getData(optionsFile)
%% runOptions
% - set all relevant paths, global variables
% - specify what analysis steps should be executed when running "runAnalysis"
% - make directories and folderstructure for data if needed
%
%  SYNTAX:  getData
%  INPUT:  optionsFile
%  OUTPUT: optionsFile, updated after reading the data
%
% Original: 30/5/2023; Katharina Wellstein
% Amended: 23/2/2024; Nicholas Burton
% -------------------------------------------------------------------------
%
% Copyright (C) 2024 - need to fill in details
%
% This file is released under the terms of the GNU General Public Licence
% (GPL), version 3. You can redistribute it and/or modify it under the
% terms of the GPL (either version 3 or, at your option, any later version).
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details:
% <http://www.gnu.org/licenses/>
%
% You should have received a copy of the GNU General Public License
% along with this program.  If not, see <http://www.gnu.org/licenses/>.
% _________________________________________________________________________
% =========================================================================
%load file to access paths
load("optionsFile.mat")

%% DATA EXTRACTION & PREPARATION
% Create empty table for individual mouse with variable names as columns
TaskTableVarTypes = {'string','string','double','double','double','double','double','double','double'};
TaskTableVarNames = {'TrialCode','Cohort','RewardingLeverSide','Choice','Outcome','TrialStartTime','LeverPressTime','ResponseTime','RecepticalBeamBreak'};
ExperimentTaskTable = table('Size',[optionsFile.task.nTrials length(TaskTableVarNames)],'VariableTypes', TaskTableVarTypes,'VariableNames',TaskTableVarNames);

%% STEP 1: Check to see if extractData is needed first
% if multiple mice are condensed into one large raw MED-PC file (with a .file extension)
allFiles = dir(fullfile(optionsFile.paths.dataToAnalyse,'*.*'));
allFiles = allFiles(3:end); %removes Unix subfolder pointers "." and ".."
fileCategory = zeros(length(allFiles),1);

for fileSizei = 1:length(allFiles)
    if allFiles(fileSizei).bytes >= 100000 % 1 = true; individualMouseMECPDCFile is 63,140 bytes
        fileCategory(fileSizei,1) = 1; %1 = to process
    else
        continue
    end %end of check if file is overly large (>100,000 bytes)
end %end of check for files with .file in dataToAnalyse dir

%check if filesToProcess is empty of if there are identified large files to deconstruct
if ~isempty(fileCategory(:,1)); disp('Large (>100,000 bytes) raw MED-PC file(s) found. Beginning extraction of individual mice...');
else disp('No large files detected.'); end %If filesToProcess is NOT empty, meaning there are files to process (extract individual mice)

% list containing the medpcTaskNames you want to look for and extract
taskSearchList = ["NJB_HGF_TrainingTask_RL","NJB_HGF_TrainingTask_LL - Copy","NJB_HGF_TestTaskA","NJB_HGF_TestTaskB"]; %optionsFile.Task.taskList


%for each large file found
for largeFilei = 1:length(fileCategory)
    if fileCategory(largeFilei,1) == 0; %skip if file is not identified as large (0) in filesToProcess
        continue
    else
        fileName = string(allFiles(largeFilei).name);
        largeMEDPCFile = readtable(fullfile(optionsFile.paths.dataToAnalyse,filesep,fileName));
        for operantTaski = 1:length(taskSearchList) %for each task name in the task list
            startIndices = find(contains(largeMEDPCFile.Var2,taskSearchList(operantTaski)));
            for startIndicesi = 1:length(startIndices) %row index for all mentions of taskListi
                currMouse = cell2mat(largeMEDPCFile.Var2(startIndices(startIndicesi)-6));
                % save data into individual mouse tables
                ExperimentTaskTable.TrialCode(:)           = taskSearchList(operantTaski);  %TrialCode
                ExperimentTaskTable.Cohort(:)              = cell2mat(largeMEDPCFile.Var2(startIndices(operantTaski)-5)); 
                ExperimentTaskTable.Outcome                = cell2mat(largeMEDPCFile.Var2((startIndices(startIndicesi)+optionsFile.dataFile.outcomeOffset+1):(startIndices(startIndicesi)+optionsFile.dataFile.outcomeOffset+optionsFile.task.nTrials)));   %Outcome
                ExperimentTaskTable.Choice                 = cell2mat(largeMEDPCFile.Var2((startIndices(startIndicesi)+optionsFile.dataFile.choiceOffset+1):(startIndices(startIndicesi)+optionsFile.dataFile.choiceOffset+optionsFile.task.nTrials)));   %Choice
                ExperimentTaskTable.TrialStartTime         = transpose(0:13:3627); % cell2mat(largeMEDPCFile.Var2((startIndices(startIndicesi)+optionsFile.dataFile.trialStartTimeOffset+1):(startIndices(startIndicesi)+optionsFile.dataFile.trialStartTimeOffset+optionsFile.task.nTrials)));   %TrialStartTime
                ExperimentTaskTable.RecepticalBeamBreak    = cell2mat(largeMEDPCFile.Var2((startIndices(startIndicesi)+optionsFile.dataFile.recepticalBeamBreakOffset+1):(startIndices(startIndicesi)+optionsFile.dataFile.recepticalBeamBreakOffset+optionsFile.task.nTrials)));   %RecepticalBeamBreak
                ExperimentTaskTable.LeverPressTime         = cell2mat(largeMEDPCFile.Var2((startIndices(startIndicesi)+optionsFile.dataFile.leverPressTimeOffset+1):(startIndices(startIndicesi)+optionsFile.dataFile.leverPressTimeOffset+optionsFile.task.nTrials)));   %LeverPressTime
                ExperimentTaskTable.ResponseTime(:)        = (ExperimentTaskTable.TrialStartTime - ExperimentTaskTable.LeverPressTime);

                ExperimentTaskTable.RewardingLeverSide     = readcell([optionsFile.paths.binInputSeqDir,'2024_HGFPilot3',filesep,taskSearchList(operantTaski),'.txt'])';%RewardingLeverSide
           
                % Data correction
                ExperimentTaskTable.Choice(ExperimentTaskTable.Choice==3) = NaN;  % Replace omissions (3 in Choice) with NaN
                ExperimentTaskTable.RecepticalBeamBreak(ExperimentTaskTable.RecepticalBeamBreak<0) = NaN;
        
                save([char(optionsFile.paths.resultsDir),'/mouse',char(currMouse),'_',taskSearchList(operantTaski)],'ExperimentTaskTable');

            end %end of using startIndices to extract and save individual mice data
        end %end of searching for each taskName in list in largeMEDPCFile
    end %end of checking filesToProcess vector
end %end of processing large MEDPC file

%% STEP 2: For loop which creates individual mouse tables from rawTaskData file
% (where each column is a mouse)
files = dir(fullfile(optionsFile.paths.dataToAnalyse,'*Subject *.txt'));

for i = 1:optionsFile.cohort.nSize
    fileName  = string(files(i).name);
    currMouse = extract(fileName ," "+digitsPattern(3)+"."); %find three digits between space and .
    currMouse = erase(currMouse{end}," ");
    currMouse = erase(currMouse,".");
    data      = readcell(fullfile(optionsFile.paths.dataToAnalyse, fileName));
    [~,cols]  = size(cell2mat(data(50,2)));

    if cols<10 % if yes, based on old version of saving data with the
        % save arrays into table
        ExperimentTaskTable.Outcome                = cell2mat(largeMEDPCFile(startIndices(operantTaski)+optionsFile.DataFile.outcomeOffset):...
            ((startIndices(operantTaski)+optionsFile.DataFile.outcomeOffset)+optionsFile.Task.nTrials),2);   %Outcome
        ExperimentTaskTable.Choice                = cell2mat(largeMEDPCFile(startIndices(operantTaski)+optionsFile.DataFile.choiceOffset):...
            ((startIndices(operantTaski)+optionsFile.DataFile.choiceOffset)+optionsFile.Task.nTrials),2);   %Choice
        ExperimentTaskTable.TrialStartTime                = (0:7:3640)';   %TrialStartTime
        ExperimentTaskTable.RecepticalBeamBreak                = cell2mat(largeMEDPCFile(startIndices(operantTaski)+optionsFile.DataFile.recepticalBeamBreakOffset):...
            ((startIndices(operantTaski)+optionsFile.DataFile.recepticalBeamBreakOffsetOffset)+optionsFile.Task.nTrials),2);   %RecepticalBeamBreak
        ExperimentTaskTable.LeverPressTime               = cell2mat(largeMEDPCFile(startIndices(operantTaski)+optionsFile.DataFile.leverPressTimeOffset):...
            ((startIndices(operantTaski)+optionsFile.DataFile.leverPressTimeOffsetOffset)+optionsFile.Task.nTrials),2);   %LeverPressTime
        optionsFile.task.MouseID(i,:) = string(currMouse);

        % Data correction
        ExperimentTaskTable.Choice(ExperimentTaskTable.Choice==3) = NaN;  % Replace omissions (3 in Choice) with NaN
        ExperimentTaskTable.RecepticalBeamBreak(ExperimentTaskTable.RecepticalBeamBreak<0) = NaN;

        save([char(optionsFile.paths.resultsDir),'/mouse',char(currMouse)],'ExperimentTaskTable');

    else
        disp(['Mouse: ', char(currMouse), 'is not saved in the right format for this analysis. ...' ...
            'This may be because it was only training data or there is something wrong with formatting. Please make sure to check manually.']);
    end

end
optionsFile.task.MouseID(find(isnan(optionsFile.task.MouseID)))=[]; % Search MouseIDs for any index's that are 'NaN's and remove them
optionsFile.cohort.nSize = length(optionsFile.task.MouseID); % Adjust index value of cohort.nSize if mouseIDs were removed by above process

end
